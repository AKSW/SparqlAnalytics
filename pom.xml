<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.aksw.sparql-analytics</groupId>
	<artifactId>sparql-analytics-parent</artifactId>
	<version>0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>SPARQL Analytics - Parent</name>
	<url>http://aksw.org/Projects/SparqlAnalytics</url>

	<modules>
		<module>sparql-analytics-core</module>
		<module>sparql-analytics-server</module>
	</modules>


	<properties>

		<!-- Dependency Versions -->
		<jena-sparql-api.version>0.6.0-SNAPSHOT</jena-sparql-api.version>
		
 		<jetty.version>9.0.0.v20130308</jetty.version>
		<jetty-plugin.version>8.1.10.v20130312</jetty-plugin.version>
		<maven-war-plugin.version>2.3</maven-war-plugin.version>
<!-- 		<org.mortbay.jetty.version>7.0.0.pre5</org.mortbay.jetty.version> -->
		<spring.version>3.1.2.RELEASE</spring.version>
		<aksw.commons.version>0.5-SNAPSHOT</aksw.commons.version>
<!-- 		<atmosphere.version>1.0.12</atmosphere.version> -->
		<atmosphere-jquery.version>1.0.9</atmosphere-jquery.version>

		<!-- DON'T TOUCH THESE VERSIONS OR KITTENS WILL DIE -->
<!-- 		<jersey.version>1.8</jersey.version> -->
		<jersey-spring.version>1.12</jersey-spring.version>
		<jersey-json.version>1.12</jersey-json.version>
<!-- 		<jersey-json.version>1.17.1</jersey-json.version> -->
    	<javaee-api.version>6.0</javaee-api.version>

		<joda-time.version>2.2</joda-time.version>			


		<slf4j.version>1.6.0</slf4j.version>
		<log4j.version>1.2.14</log4j.version>

		<!-- Project Settings -->
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<java.version>1.7</java.version>
		<java.version.javadoc>http://docs.oracle.com/javase/7/docs/api/</java.version.javadoc>
		<file.encoding>UTF-8</file.encoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<scm>
<!-- 		<connection>scm:git:git@github.com:AKSW/Sparqlify.git</connection> -->
		<!-- developerConnection></developerConnection -->
		<!-- url>https://my-project.googlecode.com/svn</url -->
		<tag>HEAD</tag>
	</scm>


	<dependencyManagement>
		<dependencies>
		
			<!-- Self dependencies -->
			<dependency>
				<groupId>org.aksw.sparql-analytics</groupId>
				<artifactId>sparql-analytics-core</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aksw.sparql-analytics</groupId>
				<artifactId>sparql-analytics-server</artifactId>
				<version>${project.version}</version>
			</dependency>
		

			<!-- Jena SPARQL API -->		
			<dependency>
				<groupId>org.aksw.jena-sparql-api</groupId>
				<artifactId>jena-sparql-api-core</artifactId>
				<version>${jena-sparql-api.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aksw.jena-sparql-api</groupId>
				<artifactId>jena-sparql-api-server</artifactId>
				<version>${jena-sparql-api.version}</version>
			</dependency>


			<dependency>
				<groupId>org.atmosphere</groupId>
				<artifactId>atmosphere-jquery</artifactId>
				<version>${atmosphere-jquery.version}</version>
				<scope>provided</scope>
				<type>war</type>
			</dependency>

			<!-- Jersey -->
			<dependency>
				<groupId>com.sun.jersey.contribs</groupId>
				<artifactId>jersey-spring</artifactId>
				<version>${jersey-spring.version}</version>
			</dependency>
	        <dependency>
	            <groupId>javax</groupId>
	            <artifactId>javaee-api</artifactId>
	            <version>${javaee-api.version}</version>
	            <scope>provided</scope>
	        </dependency>

			

			<!-- Logging -->
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-ext</artifactId>
				<version>${slf4j.version}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j.version}</version>
				<type>jar</type>
				<scope>runtime</scope>
			</dependency>



<!-- 			<dependency> -->
<!-- 				<groupId>org.aksw.sparqlify</groupId> -->
<!-- 				<artifactId>sparqlify-core</artifactId> -->
<!-- 				<version>0.2-SNAPSHOT</version> -->
<!-- 			</dependency> -->


			<!-- AKSW Commons -->
			<dependency>
				<groupId>org.aksw.commons</groupId>
				<artifactId>util</artifactId>
				<version>${aksw.commons.version}</version>
				<scope>compile</scope>
			</dependency>

			
			<!-- Database Connectivity -->
			<dependency>
				<groupId>postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>8.4-701.jdbc4</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
<!-- 			<dependency> -->
<!-- 				<groupId>org.postgis</groupId> -->
<!-- 				<artifactId>postgis-jdbc</artifactId> -->
<!-- 				<version>1.3.3</version> -->
<!-- 				<type>jar</type> -->
<!-- 				<scope>compile</scope> -->
<!-- 			</dependency> -->
			
			
			<!-- JDBC Connection Pooling -->
			<dependency>
				<groupId>com.jolbox</groupId>
				<artifactId>bonecp</artifactId>
				<version>0.7.1.RELEASE</version>
			</dependency>
			
			
			<!-- Used for SQL-Escapting (StringEscapeUtils) -->
			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>2.4</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>


			<!-- Command Line Argument Parsing -->
			<dependency>
				<groupId>commons-cli</groupId>
				<artifactId>commons-cli</artifactId>
				<version>1.2</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			


<!-- Not sure if we need this for getting Jena to work -->
<!-- 			<dependency> -->
<!-- 				<groupId>xerces</groupId> -->
<!-- 				<artifactId>xercesImpl</artifactId> -->
<!-- 				<version>2.10.0</version> -->
<!-- 				<scope>runtime</scope> -->
<!-- 			</dependency> -->
	

			<!-- Collection Libraries -->
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>11.0</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>


			<!-- Time Library -->
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
			</dependency>

			<!-- Gson: Java to Json conversion -->
			<dependency>
				<groupId>com.google.code.gson</groupId>
				<artifactId>gson</artifactId>
				<version>2.2.2</version>
				<scope>compile</scope>
			</dependency>

			<!-- Testing -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.11</version>
				<scope>test</scope>
			</dependency>

			<!-- Spring Framwork -->
<!-- 			<dependency> -->
<!-- 				<groupId>org.springframework</groupId> -->
<!-- 				<artifactId>spring-core</artifactId> -->
<!-- 				<version>${spring.version}</version> -->
<!-- 			</dependency> -->

<!-- 			<dependency> -->
<!-- 				<groupId>org.springframework</groupId> -->
<!-- 				<artifactId>spring-context</artifactId> -->
<!-- 				<version>${spring.version}</version> -->
<!-- 			</dependency> -->

<!-- 			<dependency> -->
<!-- 				<groupId>org.springframework</groupId> -->
<!-- 				<artifactId>spring-web</artifactId> -->
<!-- 				<version>${spring.version}</version> -->
<!-- 			</dependency> -->

<!-- 			<dependency> -->
<!-- 				<groupId>org.springframework</groupId> -->
<!-- 				<artifactId>spring-beans</artifactId> -->
<!-- 				<version>${spring.version}</version> -->
<!-- 			</dependency> -->
			

<!-- 			<dependency> -->
<!-- 				<groupId>org.atmosphere</groupId> -->
<!-- 				<artifactId>nettosphere</artifactId> -->
<!-- 				<version>${nettosphere.version}</version> -->
<!-- 				<scope>test</scope> -->
<!-- 				<exclusions> -->
<!-- 					<exclusion> -->
<!-- 						<groupId>ch.qos.logback</groupId> -->
<!-- 						<artifactId>logback-core</artifactId> -->
<!-- 					</exclusion> -->
<!-- 					<exclusion> -->
<!-- 						<groupId>ch.qos.logback</groupId> -->
<!-- 						<artifactId>logback-classic</artifactId> -->
<!-- 					</exclusion> -->
<!-- 				</exclusions> -->
<!-- 			</dependency> -->
		
			<!-- AHC -->
<!-- 			<dependency> -->
<!-- 				<groupId>com.ning</groupId> -->
<!-- 				<artifactId>async-http-client</artifactId> -->
<!-- 				<version>${ahc.version}</version> -->
<!-- 				<scope>test</scope> -->
<!-- 			</dependency> -->


		</dependencies>
	</dependencyManagement>

	<distributionManagement>
		<repository>
			<id>maven.aksw.internal</id>
			<name>AKSW Internal Release Repository</name>
			<url>http://maven.aksw.org/archiva/repository/internal</url>
		</repository>

		<snapshotRepository>
			<id>maven.aksw.snapshots</id>
			<name>AKSW Snapshot Repository</name>
			<url>http://maven.aksw.org/archiva/repository/snapshots</url>
		</snapshotRepository>

	</distributionManagement>


	<build>
		<plugins>

			<!-- That's a sledge hammer solution - but at least it works ... -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<arguments>-P!source-artifacts</arguments>
					<useReleaseProfile>false</useReleaseProfile>
					<goals>-Dmaven.test.skip=true deploy</goals>
				</configuration>
			</plugin>


			<!--Maven Compiler Plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.1.2</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8.1</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.13</version>
				<configuration>
					<forkMode>pertest</forkMode>
					<argLine>-Xms256m -Xmx512m</argLine>
					<testFailureIgnore>false</testFailureIgnore>
					<skipTests>false</skipTests>
				</configuration>
			</plugin>

<!-- 			<plugin> -->
<!-- 				<groupId>org.apache.maven.plugins</groupId> -->
<!-- 				<artifactId>maven-war-plugin</artifactId> -->
<!-- 				<version>${maven-war-plugin.version}</version> -->
<!-- 			</plugin> -->

			<plugin>
				<groupId>org.jboss.tattletale</groupId>
				<artifactId>tattletale-maven</artifactId>
				<version>1.1.0.Final</version>
				<executions>
					<execution>
						<phase>verify</phase> <!-- needs to run after WAR package has been built -->
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<source>${project.build.directory}/${project.build.finalName}/WEB-INF/lib</source>
					<destination>${project.reporting.outputDirectory}/tattletale</destination>
					<reports>
						<report>jar</report>
						<report>multiplejars</report>
					</reports>
					<profiles>
						<profile>java6</profile>
					</profiles>
					<failOnWarn>true</failOnWarn>
					<!-- excluding some jars, if jar name contains any of these strings 
						it won't be analyzed -->
					<excludes>
						<exclude>commons-beanutils-</exclude>
						
						<!-- TODO These conflicts should be resolved -->
						<exclude>stax-api-</exclude>
						<exclude>xml-apis-</exclude>
						
						<exclude>commons-logging-</exclude>
						 
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>


	<repositories>
		<repository>
			<id>maven.aksw.internal</id>
			<name>University Leipzig, AKSW Maven2 Internal Repository</name>
			<url>http://maven.aksw.org/repository/internal/</url>
		</repository>

		<repository>
			<id>maven.aksw.snapshots</id>
			<name>University Leipzig, AKSW Maven2 Snapshot Repository</name>
			<url>http://maven.aksw.org/repository/snapshots/</url>
		</repository>

		<repository>
			<id>maven2-repository.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2/</url>
			<layout>default</layout>
		</repository>

		<!-- JBoss repo for the maven tattletale plugin that checks for duplicate 
			classes in war files -->
		<repository>
			<id>jboss</id>
			<url>https://repository.jboss.org/nexus/content/repositories/releases</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

	</repositories>


</project>
